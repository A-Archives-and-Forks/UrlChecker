# This actions validates the gradle files and runs a build test to ensure the app is not corrupted
# if succeeded, and the source is a pull request, builds an evaluation apk and posts a comment to download it
name: Validate gradle build test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# parameters
env:
  VARIANT: evaluation
  NAME: URLCheck_evaluation.apk
  DAYS: 14

permissions:
  contents: read # to checkout the repo
  pull-requests: write # to write the comment

# this will cancel running actions if a newer commit is added to the pr
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Change wrapper permissions
        # for some reason the gradle-build-action doesn't do this automatically
        run: chmod +x ./gradlew

      - name: Build & test with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: >
            build
            test

      # the following steps will only run for PRs

      - name: "[PR] Generate apk"
        if: ${{ github.event_name == 'pull_request' }}
        uses: gradle/gradle-build-action@v3
        with:
          arguments: >
            assemble${{ env.VARIANT }}

      - name: "[PR] Upload apk as artifact"
        if: ${{ github.event_name == 'pull_request' }}
        id: upload-artifact-step
        uses: actions/upload-artifact@v4
        with:
          path: ./app/build/outputs/apk/${{ env.VARIANT }}/app-${{ env.VARIANT }}.apk
          name: ${{ env.NAME }}
          retention-days: ${{ env.DAYS }}

      - name: "[PR] Comment url to artifact"
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ github.token }}
          PR: ${{ github.event.pull_request.number }}
          ARTIFACT: ${{ steps.upload-artifact-step.outputs.artifact-url }}
          ACTION: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}?pr=${{ github.event.pull_request.number }}"
        run: |

          # calculate expiration date
          EXPIRATION=$(date -d "+$DAYS days")
          echo "EXPIRATION=$EXPIRATION"

          # post link comment
          gh pr comment $PR -F - <<EOF
          This PR builds correctly, here is the generated apk.
          This unsigned version can be installed alongside the original app and should only be used for testing the changes, not for daily usage.
          
          | [Download testing apk]($ARTIFACT) |
          | - |
          
          
          You must be logged in for the link to work.
          The link will expire in $DAYS days, at $EXPIRATION.
          
          <hr>
          
          <sub>This is an automatic comment created by a [Github Action]($ACTION)</sub>
          EOF
